summary(room)
data.room = data.frame(room, data)
data.room = data.room[order(room), ]
head(data.room)
write.csv(data.room, 'Data/data.csv')
# t-test
t.res = t.test(gene ~ status, data = data, var.equal = FALSE)
t.res
library(rpart)
library(rattle)  # for better plot
tree.res = rpart(status ~ gene, data = data, method="class")
printcp(tree.res) # display the results
# plot tree (ugly and nice version)
#plot(tree.res, uniform=TRUE, main="Classification Tree")
#text(tree.res, use.n=TRUE, all=TRUE, cex=1)
fancyRpartPlot(tree.res, main="Classification Tree")
table(data.room$room, data.room$status)
set.seed(32)
# cases
n_case = 50
set1 = rnorm(n_case, mean = 1.8, sd = 1) + runif(n_case, min = 0, max = 0.2)
# controls
n_ctl = 100
set2 = rnorm(n_ctl, mean = 1, sd = 0.5) + runif(n_ctl, min = 0, max = 0.2)
status = factor(c(rep('case', n_case), rep('control', n_ctl)), levels = c('control', 'case'))
data = data.frame(gene = c(set1, set2), status)
# sample rows
set.seed(5)
new.order = sample(1:100, 100, replace = FALSE)
data = data[new.order,]
# assign groups of data
# note: not all rooms have the same numbers!
n.room = 10
room = sample(c(paste('room', 1:n.room, sep = '')), 100, replace = TRUE)
room = factor(room, levels = c(paste('room', 1:n.room, sep = '')))
data.room = data.frame(room, data)
data.room = data.room[order(room), ]
head(data.room)
write.csv(data.room, 'Data/data.csv')
save(data, data.rom, file = 'workspace.RData')
set.seed(32)
# cases
n_case = 50
set1 = rnorm(n_case, mean = 1.8, sd = 1) + runif(n_case, min = 0, max = 0.2)
# controls
n_ctl = 100
set2 = rnorm(n_ctl, mean = 1, sd = 0.5) + runif(n_ctl, min = 0, max = 0.2)
status = factor(c(rep('case', n_case), rep('control', n_ctl)), levels = c('control', 'case'))
data = data.frame(gene = c(set1, set2), status)
# sample rows
set.seed(5)
new.order = sample(1:100, 100, replace = FALSE)
data = data[new.order,]
# assign groups of data
# note: not all rooms have the same numbers!
n.room = 10
room = sample(c(paste('room', 1:n.room, sep = '')), 100, replace = TRUE)
room = factor(room, levels = c(paste('room', 1:n.room, sep = '')))
data.room = data.frame(room, data)
data.room = data.room[order(room), ]
head(data.room)
write.csv(data.room, 'Data/data.csv')
save(data, data.room, file = 'workspace.RData')
save(data, data.room, room, status, file = 'workspace.RData')
load('workspace.RData')
summary(room)
summary(status)
table(data.room$room, data.room$status)
boxplot(data$gene, main = 'A boxplot of the gene expression levels')
set.seed(32)
# cases
n_case = 50
set1 = rnorm(n_case, mean = 1.8, sd = 1) + runif(n_case, min = 0, max = 0.2)
# controls
n_ctl = 100
set2 = rnorm(n_ctl, mean = 1, sd = 0.5) + runif(n_ctl, min = 0, max = 0.2)
status = factor(c(rep('case', n_case), rep('control', n_ctl)), levels = c('control', 'case'))
data = data.frame(gene = c(set1, set2), status)
# sample rows
set.seed(5)
new.order = sample(1:100, 100, replace = FALSE)
data = data[new.order,]
# assign groups of data
# note: not all rooms have the same numbers!
n.room = 8
room = sample(c(paste('room', 1:n.room, sep = '')), 100, replace = TRUE)
room = factor(room, levels = c(paste('room', 1:n.room, sep = '')))
data.room = data.frame(room, data)
data.room = data.room[order(room), ]
head(data.room)
write.csv(data.room, 'Data/data.csv')
save(data, data.room, room, status, file = 'workspace.RData')
load('workspace.RData')
summary(room)
summary(status)
table(data.room$room, data.room$status)
boxplot(data$gene, main = 'A boxplot of the gene expression levels')
room.nb = 'room2'
# subset data
data.subset = data[which(data.room$room == room.nb), ]
data.subset
boxplot(gene ~ status, data = data.subset)
room.nb = 'room6'
# subset data
data.subset = data[which(data.room$room == room.nb), ]
data.subset
boxplot(gene ~ status, data = data.subset)
room.nb = 'room1'
# subset data
data.subset = data[which(data.room$room == room.nb), ]
data.subset
boxplot(gene ~ status, data = data.subset)
room.nb = 'room2'
# subset data
data.subset = data[which(data.room$room == room.nb), ]
data.subset
boxplot(gene ~ status, data = data.subset)
boxplot(gene ~ status, data = data)
# t-test
t.res = t.test(gene ~ status, data = data, var.equal = FALSE)
t.res
library(rpart)
library(rattle)  # for better plot
tree.res = rpart(status ~ gene, data = data, method="class")
printcp(tree.res) # display the results
# plot tree (ugly and nice version)
#plot(tree.res, uniform=TRUE, main="Classification Tree")
#text(tree.res, use.n=TRUE, all=TRUE, cex=1)
fancyRpartPlot(tree.res, main="Classification Tree")
head(data)
data %>%
ggplot( aes(x=name, y=gene, fill=name)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
data %>%
ggplot( aes(x=name, y=gene, fill=name)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
# a more fancy boxplot
library(ggplot2)
data %>%
ggplot( aes(x=name, y=gene, fill=name)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
data %>%
ggplot( aes(x=name, y=gene, fill=name)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
library(ggplot2)
data %>%
ggplot( aes(x=name, y=gene, fill=name)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
# a more fancy boxplot
library(ggplot2)
data %>%
ggplot( aes(x=status, y=gene, fill=status)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
# a more fancy boxplot
library(ggplot2)
data %>%
ggplot( aes(x=status, y=gene, fill=status)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
xlab("")
head(data.room)
library(ggplot2)
data.room %>%
ggplot( aes(x=status, y=gene, fill=status)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
xlab("") + facet_wrap(~ room)
# a more fancy boxplot
library(ggplot2)
library(tidyverse)
data %>%
ggplot( aes(x=status, y=gene)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
xlab("")
# a more fancy boxplot
library(ggplot2)
library(tidyverse)
data %>%
ggplot( aes(y=gene, fill=status)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
xlab("")
# a more fancy boxplot
library(ggplot2)
library(tidyverse)
data %>%
ggplot( aes(x=gene, y=gene, fill=gene)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
xlab("")
# a more fancy boxplot
library(ggplot2)
library(tidyverse)
data %>%
ggplot( aes(x=status, y=gene, fill=status)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
xlab("")
# a more fancy boxplot
library(ggplot2)
library(tidyverse)
data %>%
ggplot( aes(x="", y=gene)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
xlab("")
# a more fancy boxplot
library(ggplot2)
library(tidyverse)
data %>%
ggplot( aes(x=status, y=gene, fill=status)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) + ggtitle("Boxplot of the gene expression levels across all individuals")
xlab("")
# a more fancy boxplot
library(ggplot2)
library(tidyverse)
data %>%
ggplot( aes(x="", y=gene)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) + ggtitle("Boxplot of the gene expression levels across all individuals")
xlab("")
# a more fancy boxplot
library(ggplot2)
library(tidyverse)
data %>%
ggplot( aes(x="", y=gene)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.1) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) + ggtitle("Boxplot of the gene expression levels across all individuals")
xlab("")
# a more fancy boxplot
library(ggplot2)
library(tidyverse)
data %>%
ggplot( aes(x="", y=gene)) +
geom_boxplot() +
geom_jitter(color="black", size=0.2, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) + ggtitle("Boxplot of the gene expression levels across all individuals")
xlab("")
# a more fancy boxplot
library(ggplot2)
library(tidyverse)
data %>%
ggplot( aes(x=status, y=gene, fill=status)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) + ggtitle("Boxplots of the gene expression levels for controls and cases")
xlab("")
data.room %>%
ggplot(subset(data.room, room %in% c("room2")), aes(x=status, y=gene, fill=status)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) + ggtitle("Boxplots of the gene expression levels for controls and cases")
xlab("")
data.room %>%
ggplot(subset(data.room, room %in% c("room2")), aes(x=status, y=gene, fill=status)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) + ggtitle("Boxplots of the gene expression levels for controls and cases")
xlab("")
data.room
ggplot(subset(data.room, room %in% c("room2")), aes(x=status, y=gene, fill=status)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) + ggtitle("Boxplots of the gene expression levels for controls and cases")
xlab("")
ggplot(subset(data.room, room %in% c("room4")), aes(x=status, y=gene, fill=status)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) + ggtitle("Boxplots of the gene expression levels for controls and cases")
xlab("")
room.nb = 'room2'
# # subset data
# data.subset = data[which(data.room$room == room.nb), ]
# data.subset
# boxplot(gene ~ status, data = data.subset)
data.room %>%
ggplot(subset(data.room, room %in% room.nb), aes(x=status, y=gene, fill=status)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) + ggtitle(paste("Boxplots of the gene expression levels for controls and cases in room", room.nb))
xlab("")
data.room %>%
ggplot(subset(data.room, room %in% room.nb), aes(x=status, y=gene, fill=status)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) + ggtitle(paste("Boxplots of the gene expression levels for controls and cases in room", room.nb))
xlab("")
data.room %>%
ggplot(subset(data.room, room %in% room.nb), aes(x=status, y=gene, fill=status)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) + ggtitle(paste("Boxplots of the gene expression levels for controls and cases in room", room.nb))
xlab("")
room.nb = 'room2'
# # subset data
# data.subset = data[which(data.room$room == room.nb), ]
# data.subset
# boxplot(gene ~ status, data = data.subset)
data.room %>%
ggplot(subset(data.room, room %in% room.nb), aes(x=status, y=gene, fill=status)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle(paste("Boxplots of the gene expression levels for controls and cases in room", room.nb)) +
xlab("")
data.room %>%
ggplot(subset(data.room, room %in% room.nb), aes(x=status, y=gene, fill=status)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle(paste("Boxplots of the gene expression levels for controls and cases in room", room.nb)) +
xlab("")
data.room %>%
ggplot(subset(data.room, room %in% room.nb), aes(x=status, y=gene, fill=status)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle(paste("Boxplots of the gene expression levels for controls and cases in room", room.nb)) +
xlab("")
library(ggplot2)
library(tidyverse)
data %>%
ggplot( aes(x="", y=gene)) +
geom_boxplot() +
geom_jitter(color="black", size=0.2, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) + ggtitle("Boxplot of the gene expression levels across all individuals") +
xlab("")
data %>%
ggplot( aes(x=status, y=gene, fill=status)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) + ggtitle("Boxplots of the gene expression levels for controls and cases") +
xlab("")
room.nb = 'room2'
# # subset data
# data.subset = data[which(data.room$room == room.nb), ]
# data.subset
# boxplot(gene ~ status, data = data.subset)
ggplot(subset(data.room, room %in% room.nb), aes(x=status, y=gene, fill=status)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle(paste("Boxplots of the gene expression levels for controls and cases in room", room.nb)) +
xlab("")
data.room %>%
ggplot( aes(x=status, y=gene, fill=status)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
xlab("") +
ggtitle(paste("Boxplots of the gene expression levels for controls and cases per room") +
facet_wrap(~ room)
data.room %>%
ggplot( aes(x=status, y=gene, fill=status)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
xlab("") +
ggtitle("Boxplots of the gene expression levels for controls and cases per room") +
facet_wrap(~ room)
data.room %>%
ggplot( aes(x=status, y=gene, fill=status)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
xlab("") +
ggtitle("Boxplots of the gene expression levels for controls and cases per room") +
facet_wrap(~ room)
6000*12
2021-5
